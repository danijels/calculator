{"version":3,"sources":["App.js","components/display.js","components/key.js","components/keypad.js","reportWebVitals.js","index.js"],"names":["App","props","state","outputVal","prevVal","formula","evaluated","handleClick","bind","clear","handleNums","warn","handleDecimal","handleOperators","handleEval","document","addEventListener","this","removeEventListener","e","val","key","target","value","toString","includes","Number","test","setState","currentSign","length","newFormula","slice","concat","setTimeout","op","expression","replaceAll","answer","eval","id","output","text","ids","Component","Display","class","Key","Keypad","keys","map","i","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qoDAMMA,I,oWACF,aAAYC,GAAQ,IAAD,gLACf,mBAAMA,IACDC,MAAQ,CACXC,UAAW,IACXC,QAAS,IACTC,QAAS,GACTC,WAAW,GAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,uKACnB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,uKACb,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,uKAClB,EAAKG,KAAO,EAAKA,KAAKH,KAAV,uKACZ,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,uKACrB,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,uKACvB,EAAKM,WAAa,EAAKA,WAAWN,KAAhB,uKAdH,E,oMAgBnB,WACIO,SAASC,iBAAiB,UAAWC,KAAKV,e,kCAE9C,WACIQ,SAASG,oBAAoB,UAAWD,KAAKV,e,yBAEjD,SAAYY,GACR,IAAMC,EAAMD,EAAEE,KAAOF,EAAEG,OAAOC,MAI9B,IAHeN,KAAKf,MAAMC,UAAUqB,WAGxBC,SAAS,SAAU,CAC3B,GAAY,OAARL,EAAc,OAAOH,KAAKR,QAC9B,GAAIiB,OAAON,IAAQ,GAAKM,OAAON,IAAQ,EAAG,OAAOH,KAAKP,WAAWU,GACjE,GAAY,MAARA,EAAa,OAAOH,KAAKL,gBAC7B,GAAI,UAAUe,KAAKP,GAAM,OAAOH,KAAKJ,gBAAgBO,GACrD,GAAI,CAAC,IAAK,SAASK,SAASL,GAAM,OAAOH,KAAKH,gB,mBAGtD,WACIG,KAAKW,SAAS,CACZzB,UAAW,IACXC,QAAS,IACTC,QAAS,GACTwB,YAAa,MACbvB,WAAW,M,wBAGjB,SAAWc,GAAM,IAAD,EAC8BH,KAAKf,MAAvCC,EADI,EACJA,UAAWE,EADP,EACOA,QAASC,EADhB,EACgBA,UAI5B,GAFAW,KAAKW,SAAS,CAAEtB,WAAW,IAEvBH,EAAU2B,OAAS,GAAI,OAAOb,KAAKN,OAEvC,GAAIL,EAAW,OAAOW,KAAKW,SAAS,CAClCzB,UAAWiB,EACXf,QAAiB,MAARe,EAAcA,EAAM,KAO/B,IAAIW,EAA2B,MAAd5B,GAA6B,MAARiB,EACtB,KAAZf,EACEe,EACAf,EACF,iBAAiBsB,KAAKtB,GACtBA,EAAQ2B,MAAM,GAAI,GAAGC,OAAOb,GAC5Bf,EAAUe,EAEdH,KAAKW,SAAS,CAEZzB,UAAW,aAAawB,KAAKxB,GAAaiB,EAAMjB,EAAU8B,OAAOb,GACjEf,QAAS0B,M,kBAGf,WAAQ,IAAD,OACHd,KAAKW,SAAS,CACZzB,UAAW,sBACXC,QAASa,KAAKf,MAAMC,YAEtB+B,YAAW,kBAAM,EAAKN,SAAS,CAAEzB,UAAW,EAAKD,MAAME,YAAY,O,2BAEvE,WAAiB,IAAD,EAC8Ba,KAAKf,MAAvCC,EADI,EACJA,UAAWE,EADP,EACOA,QAASC,EADhB,EACgBA,UAE5B,OAAIH,EAAU2B,OAAS,GAAWb,KAAKN,OAGnCL,EAAkBW,KAAKW,SAAS,CAClCzB,UAAW,KACXE,QAAS,KACTC,WAAW,IAGT,WAAWqB,KAAKtB,KAAaA,EAAgBY,KAAKW,SAAS,CAC7DzB,UAAW,KACXE,QAASA,EAAQ4B,OAAO,QAIrB9B,EAAUsB,SAAS,UAAxB,EAAqCR,KAAKW,SAAS,CACjDzB,UAAWA,EAAY,IACvBE,QAASA,EAAU,Q,6BAGzB,SAAgB8B,GAAK,IAAD,EACwBlB,KAAKf,MAArCG,EADQ,EACRA,QAASC,EADD,EACCA,UAAWF,EADZ,EACYA,QAG5B,OAAIE,EAAkBW,KAAKW,SAAS,CAClCzB,UAAWgC,EACX9B,QAASD,EAAQoB,WAAWS,OAAOE,GACnC7B,WAAW,IAKR,YAAYqB,KAAKtB,GAMlB,MAAMsB,KAAKtB,GAAiBY,KAAKW,SAAS,CAC5CzB,UAAWgC,EACX9B,QAASA,EAAQ2B,MAAM,GAAI,GAAGC,OAAOE,KAIlC,cAAcR,KAAKtB,QAOb,MAAP8B,GAAYlB,KAAKW,SAAS,CAC5BzB,UAAWgC,EACX9B,QAASD,EAAQ6B,OAAOE,MATelB,KAAKW,SAAS,CACrDzB,UAAWgC,EACX9B,QAAgB,MAAP8B,EAAa9B,EAAQ4B,OAAOE,GAAM/B,EAAQ6B,OAAOE,KAdrBlB,KAAKW,SAAS,CACnDzB,UAAWgC,EACX/B,QAASC,EACTA,QAASA,EAAQ4B,OAAOE,O,wBAqB9B,SAAArB,aACI,IAAKG,KAAKf,MAAMI,UAAW,CAKvB,IAJA,IAAMD,QAAUY,KAAKf,MAAMG,QACvB+B,WAAa/B,QAGV,YAAYsB,KAAKS,aACpBA,WAAaA,WAAWJ,MAAM,GAAI,GAGtCI,WAAaA,WAAWC,WAAW,KAAM,KACzC,IAAMC,OAASC,KAAKH,YAEpBnB,KAAKW,SAAS,CACZzB,UAAWmC,OACXjC,QAASA,QAAQ4B,OAAO,IAAKK,QAC7BlC,QAASkC,OACThC,WAAW,O,oBAIrB,WAqBI,OACE,mEAAKkC,GAAG,aAAR,UACI,2DAAC,sDAAD,CACEnC,QAASY,KAAKf,MAAMG,QACpBoC,OAAQxB,KAAKf,MAAMC,YAErB,2DAAC,qDAAD,CACEuC,KA3BS,CAAC,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KA4B3FC,IA3BQ,CACd,QACA,SACA,WACA,QACA,QACA,OACA,WACA,OACA,OACA,MACA,MACA,MACA,MACA,QACA,SACA,OACA,WAWMpC,YAAaU,KAAKV,qB,KAhMhBqC,8CAuMH5C,2B,0CClMA6C,IAXC,SAAC5C,GAAD,OACf,sBAAK6C,MAAM,UAAX,UACI,4BACG7C,EAAMI,UAET,mBAAGmC,GAAG,UAAN,SACGvC,EAAMwC,c,0CCICM,EAVH,SAAC9C,GAAD,OACX,wBACE6C,MAAM,MACNN,GAAIvC,EAAMuC,GACVjB,MAAOtB,EAAMyC,KAHf,SAKEzC,EAAMyC,QCSMM,IAbA,SAAC/C,GACf,IAAMgD,EAAOhD,EAAMyC,KAAKQ,KAAI,SAACR,EAAMS,GAAP,OAAa,cAAC,EAAD,CAAKX,GAAIvC,EAAM0C,IAAIQ,GAAeT,KAAMA,GAAZA,MAErE,OACC,qBACEI,MAAM,SACNM,QAASnD,EAAMM,YAFjB,SAIE0C,M,gICEWI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChE,EAAA,EAAD,MAEFe,SAASkD,eAAe,SAM1BZ,M","file":"static/js/main.72dba8f9.chunk.js","sourcesContent":["import { Component } from 'react'\nimport './App.scss';\n\nimport Display from './components/display.js'\nimport Keypad from './components/keypad.js'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          outputVal: '0',\n          prevVal: '0',\n          formula: '',\n          evaluated: false\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.clear = this.clear.bind(this);\n        this.handleNums = this.handleNums.bind(this);\n        this.warn = this.warn.bind(this);\n        this.handleDecimal = this.handleDecimal.bind(this);\n        this.handleOperators = this.handleOperators.bind(this);\n        this.handleEval = this.handleEval.bind(this);\n    }\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleClick);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleClick);\n    }\n    handleClick(e) {\n        const val = e.key || e.target.value;\n        const output = this.state.outputVal.toString();\n        //User can press an operator or eval if the limit is reached, but it can't be done before the timed \n        //warning goes away or the whole calculation get messed up\n        if (!output.includes('LIMIT')) {\n            if (val === 'AC') return this.clear();\n            if (Number(val) >= 0 && Number(val) <= 9) return this.handleNums(val);\n            if (val === '.') return this.handleDecimal();\n            if (/[/*\\-+]/.test(val)) return this.handleOperators(val);\n            if (['=', 'Enter'].includes(val)) return this.handleEval();\n        }\n    }\n    clear() {\n        this.setState({\n          outputVal: '0',\n          prevVal: '0',\n          formula: '',\n          currentSign: 'pos',\n          evaluated: false\n        })\n    }\n    handleNums(val) {\n        const { outputVal, formula, evaluated } = this.state;\n        //A new number was entered - a new calculation is started\n        this.setState({ evaluated: false });\n        \n        if (outputVal.length > 21) return this.warn();\n        //In case there is the result being displayed and a new number is entered\n        if (evaluated) return this.setState({\n          outputVal: val,\n          formula: val !== '0' ? val : ''\n        });\n        //The limit has not been reached, it's not the start of a new calculation:\n        \n        //If user tries to enter two zeros in a row at the beginning of a formula, only one is always allowed\n        //In case user enters 0 at the beginning of the formula or after an operator and then enters a positive \n        //number, that zero will be overwritten by the new number\n        let newFormula = outputVal === '0' && val === '0'\n          ? formula === ''\n            ? val\n            : formula\n          : /([^.0-9]0|^0)$/.test(formula)\n          ? formula.slice(0, -1).concat(val)\n          : formula + val;\n\n        this.setState({\n          //This part ensures that numbers such as 099 or 0000etc. are not accepted\n          outputVal: /^[0/*\\-+]$/.test(outputVal) ? val : outputVal.concat(val),\n          formula: newFormula\n        });\n    }\n    warn() {\n        this.setState({ \n          outputVal: 'DIGIT LIMIT REACHED',\n          prevVal: this.state.outputVal\n        });\n        setTimeout(() => this.setState({ outputVal: this.state.prevVal }), 1000);\n    }\n    handleDecimal() {\n        const { outputVal, formula, evaluated } = this.state;\n        //Handles exceeded digit limit right away\n        if (outputVal.length > 21) return this.warn();\n        //If the display currently shows the result of a previous finished calculation, \n        //entering 0 starts a new calculation that starts with 0.\n        if (evaluated) return this.setState({\n          outputVal: '0.',\n          formula: '0.',\n          evaluated: false\n        });\n        //In case . is entered right after an operator or if the formula is empty 0 is added before it\n        if (/[+\\-/*]$/.test(formula) || !formula) return this.setState({\n          outputVal: '0.',\n          formula: formula.concat('0.')\n        });    \n        //So the limit is not exceeded, no zeroes need to be added and now we just need to check \n        //if the number is already a decimal in which case no more dots can be added\n        if (!outputVal.includes('.')) return this.setState({\n          outputVal: outputVal + '.',\n          formula: formula + '.'\n        });    \n    }\n    handleOperators(op) {\n        const { formula, evaluated, prevVal } = this.state;\n        //If we have the result from the last calculation, by clicking an operator we start a new calculation \n        //with the result\n        if (evaluated) return this.setState({ \n          outputVal: op,\n          formula: prevVal.toString().concat(op),\n          evaluated: false\n        });\n        \n        //In case the formula doesn't end with an operator we save the current formula so we can deal \n        //with user changing mind about operators\n        if (!/[/*\\-+.]$/.test(formula)) return this.setState({\n          outputVal: op,\n          prevVal: formula,\n          formula: formula.concat(op)\n        });\n        //In case an operator comes right after the dot, the dot is deleted\n        if (/\\.$/.test(formula)) return this.setState({\n          outputVal: op,\n          formula: formula.slice(0, -1).concat(op)\n        });\n        //In case the formula ends with a single operator, a - gets added to the formula as the negative sign \n        //and all other operators replace the previous one\n        if (!/\\d[/*\\-+]-$/.test(formula)) return this.setState({\n          outputVal: op,\n          formula: op === '-' ? formula.concat(op) : prevVal.concat(op)\n        });    \n        //If the formula ends with an operator and a negative sign and the user enters yet another operator, \n        //the last operator and the - are replaced with the new op UNLESS the - was clicked \n        //in which case nothing happens\n        if (op !== '-') this.setState({\n          outputVal: op,\n          formula: prevVal.concat(op)\n        });\n    }\n    handleEval() {\n        if (!this.state.evaluated) {\n            const formula = this.state.formula;\n            let expression = formula;\n            //First we have to deal with the cases of the formula ending with an operator or the negative sign \n            //by just deleting them\n            while (/[/*\\-+.]$/.test(expression)) {\n                expression = expression.slice(0, -1);\n            }\n            //All occurences of -- need to be replaced with + so that an error isn't thrown\n            expression = expression.replaceAll('--', '+');\n            const answer = eval(expression);\n            \n            this.setState({\n              outputVal: answer,\n              formula: formula.concat('=', answer),\n              prevVal: answer,\n              evaluated: true\n            });\n        }\n    }\n    render() {\n        const keysText = ['AC', '/', '*', '7', '8', '9', '-', '4', '5', '6', '+', '1', '2', '3', '=', '0', '.'];\n        const keysIds = [\n          'clear', \n          'divide', \n          'multiply', \n          'seven', \n          'eight', \n          'nine', \n          'subtract', \n          'four', \n          'five', \n          'six', \n          'add', \n          'one', \n          'two', \n          'three', \n          'equals', \n          'zero', \n          'decimal'];\n\n        return (\n          <div id='calculator'>\n              <Display\n                formula={this.state.formula}\n                output={this.state.outputVal}\n              />\n              <Keypad \n                text={keysText}\n                ids={keysIds}\n                handleClick={this.handleClick}\n              />\n          </div>\n        )\n    }\n}\n\nexport default App;\n","const Display = (props) => (\r\n\t<div class='display'>\r\n\t    <p>\r\n\t      {props.formula}\r\n\t    </p>\r\n\t    <p id='display'>\r\n\t      {props.output}\r\n\t    </p>\r\n\t</div>\r\n)\r\n\r\nexport default Display","const Key = (props) => (\r\n\t<button \r\n\t  class='key'\r\n\t  id={props.id}\r\n\t  value={props.text}\r\n\t>\r\n\t\t{props.text}\r\n\t</button>\r\n);\r\n\r\nexport default Key","import Key from './key.js'\r\n\r\nconst Keypad = (props) => {\r\n\tconst keys = props.text.map((text, i) => <Key id={props.ids[i]} key={text} text={text} />)  \r\n\r\n\treturn (\r\n\t\t<div \r\n\t\t  class='keypad'\r\n\t\t  onClick={props.handleClick}\r\n\t\t>\r\n\t\t\t{keys}    \r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Keypad","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}